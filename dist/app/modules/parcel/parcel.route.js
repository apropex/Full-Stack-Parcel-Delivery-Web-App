"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const authValidator_1 = require("../../middleware/authValidator");
const userRoleVerifier_1 = require("../../middleware/userRoleVerifier");
const zodValidator_1 = require("../../middleware/zodValidator");
const user_interface_1 = require("../user/user.interface");
const parcel_controller_1 = require("./parcel.controller");
const parcel_validation_1 = require("./parcel.validation");
const { ADMIN } = user_interface_1.eUserRoles;
const parcelRoutes = (0, express_1.Router)();
parcelRoutes.post("/create", authValidator_1.authValidator, (0, zodValidator_1.zodBodyValidator)(parcel_validation_1.createParcelZodSchema), parcel_controller_1.createdParcelController);
parcelRoutes.patch("/update-parcel/:parcelId", authValidator_1.authValidator, (0, zodValidator_1.zodBodyValidator)(parcel_validation_1.updateParcelZodSchema), parcel_controller_1.updateParcelController);
parcelRoutes.patch("/update-parcel-status/:parcelId", (0, userRoleVerifier_1.userRoleVerifier)(ADMIN), (0, zodValidator_1.zodBodyValidator)(parcel_validation_1.updateParcelStatusZodSchema), parcel_controller_1.updateParcelStatusController);
parcelRoutes.patch("/update-parcel-status-log/:parcelId", (0, userRoleVerifier_1.userRoleVerifier)(ADMIN), (0, zodValidator_1.zodBodyValidator)(parcel_validation_1.updateParcelStatusZodSchema), parcel_controller_1.updateParcelStatusLogsController);
parcelRoutes.patch("/cancel/:parcelId", authValidator_1.authValidator, (0, zodValidator_1.zodBodyValidator)(parcel_validation_1.updateParcelStatusZodSchema), parcel_controller_1.cancelParcelController);
parcelRoutes.patch("/confirm/:parcelId", authValidator_1.authValidator, (0, zodValidator_1.zodBodyValidator)(parcel_validation_1.updateParcelStatusZodSchema), parcel_controller_1.confirmParcelController);
parcelRoutes.get("/all-parcels", (0, userRoleVerifier_1.userRoleVerifier)(ADMIN), parcel_controller_1.getAllParcelController);
parcelRoutes.get("/my-parcels", authValidator_1.authValidator, parcel_controller_1.getMyParcelController);
parcelRoutes.get("/incoming-parcels", authValidator_1.authValidator, parcel_controller_1.incomingParcelController);
parcelRoutes.get("/:parcelId", authValidator_1.authValidator, parcel_controller_1.getSingleParcelController);
parcelRoutes.delete("/:parcelId", (0, userRoleVerifier_1.userRoleVerifier)(ADMIN), parcel_controller_1.deleteStatusLogController);
exports.default = parcelRoutes;
